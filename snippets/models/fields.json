{
	"mauto": {
		"prefix": "mauto",
		"body": "${1:FIELDNAME} = models.AutoField($2)",
		"description": "AutoField (mauto).\n\nAn IntegerField that automatically increments according to available IDs.\n\n",
		"scope": "source.python"
	},
	"mbigauto": {
		"prefix": "mbigauto",
		"body": "${1:FIELDNAME} = models.BigAutoField($2)",
		"description": "BigAutoField (mbigauto).\n\n[New in Django 1.10.]\n\nA 64-bit integer, much like an AutoField.\n\n",
		"scope": "source.python"
	},
	"mbigint": {
		"prefix": "mbigint",
		"body": "${1:FIELDNAME} = models.BigIntegerField($2)",
		"description": "BigIntegerField (mbigint).\n\nA 64-bit integer, much like an IntegerField.\n\n",
		"scope": "source.python"
	},
	"mbinary": {
		"prefix": "mbinary",
		"body": "${1:FIELDNAME} = models.BinaryField($2)",
		"description": "BinaryField (mbinary).\n\nA field to store raw binary data.\n\n",
		"scope": "source.python"
	},
	"mbool": {
		"prefix": "mbool",
		"body": "${1:FIELDNAME} = models.BooleanField($2)",
		"description": "BooleanField (mbool).\n\nA true/false field.\n\n",
		"scope": "source.python"
	},
	"mchar": {
		"prefix": "mchar",
		"body": "${1:FIELDNAME} = models.CharField($2, max_length=${3:50})",
		"description": "CharField (mchar)",
		"scope": "source.python"
	},
	"mcoseint": {
		"prefix": "mcoseint",
		"body": "${1:FIELDNAME} = models.CommaSeparatedIntegerField($2)",
		"description": "CommaSeparatedIntegerField (mcoseint).\n\nThis field is deprecated since 1.9 in favor of CharField with validators.\n\n",
		"scope": "source.python"
	},
	"mdate": {
		"prefix": "mdate",
		"body": "${1:FIELDNAME} = models.DateField($2, auto_now=${3:False}, auto_now_add=${4:False})",
		"description": "DateField (mdate).\n\nA date, represented in Python by a datetime.date instance.\n\n",
		"scope": "source.python"
	},
	"mdatetime": {
		"prefix": "mdatetime",
		"body": "${1:FIELDNAME} = models.DateTimeField($2, auto_now=${3:False}, auto_now_add=${4:False})",
		"description": "DateTimeField (mdatetime).\n\nA date, represented in Python by a datetime.datetime instance.\n\n",
		"scope": "source.python"
	},
	"mdecimal": {
		"prefix": "mdecimal",
		"body": "${1:FIELDNAME} = models.DecimalField($2, max_digits=${3:5}, decimal_places=${4:2})",
		"description": "DecimalField (mdecimal).\n\nA fixed-precision decimal number, represented in Python by a Decimal instance.\n\n",
		"scope": "source.python"
	},
	"mduration": {
		"prefix": "mduration",
		"body": "${1:FIELDNAME} = models.DurationField($2)",
		"description": "DurationField (mduration).\n\nA field for storing periods of time - modeled in Python by timedelta.\n\n",
		"scope": "source.python"
	},
	"memail": {
		"prefix": "memail",
		"body": "${1:FIELDNAME} = models.EmailField($2, max_length=${3:254})",
		"description": "EmailField (memail).\n\nA CharField that checks that the value is a valid email address.\n\n",
		"scope": "source.python"
	},
	"mfile": {
		"prefix": "mfile",
		"body": "${1:FIELDNAME} = models.FileField($2, upload_to=${3:None}, max_length=${4:100})",
		"description": "FileField (mfile).\n\nA file-upload field.\n\n",
		"scope": "source.python"
	},
	"mfilepath": {
		"prefix": "mfilepath",
		"body": "${1:FIELDNAME} = models.FilePathField($2, path=${3:None}, match=${4:None}, recursive=${5:recursive}, max_length=${6:100})",
		"description": "FilePathField (mfilepath).\n\nA CharField whose choices are limited to the filenames in a certain directory on the filesystem.\n\n",
		"scope": "source.python"
	},
	"mfloat": {
		"prefix": "mfloat",
		"body": "${1:FIELDNAME} = models.FloatField($2)",
		"description": "FloatField (mfloat).\n\nA floating-point number represented in Python by a float instance.\n\n",
		"scope": "source.python"
	},
	"fk": {
		"prefix": "fk",
		"body": "${1:FIELDNAME} = models.ForeignKey(${2:OTHERMODEL}, on_delete=models.${3|CASCADE,PROTECT,SET_NULL,SET_DEFAULT,SET(),DO_NOTHING|})",
		"description": "ForeignKey (fk).\n\nA many-to-one relationship.\n\non_delete will become a required argument in Django 2.0. In older versions it defaults to CASCADE.\n\n",
		"scope": "source.python"
	},
	"mip": {
		"prefix": "mip",
		"body": "${1:FIELDNAME} = models.IPAddressField($2)",
		"description": "IPAddressField (mip).\n\nThis field has been deprecated since version 1.7 in favor of GenericIPAddressField.\n\n",
		"scope": "source.python"
	},
	"mimg": {
		"prefix": "mimg",
		"body": "${1:FIELDNAME} = models.ImageField($2, upload_to=${3:None}, height_field=${4:None}, width_field=${5:None}, max_length=${5:100})",
		"description": "ImageField (mimg).\n\nInherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image.\n\n",
		"scope": "source.python"
	},
	"mint": {
		"prefix": "mint",
		"body": "${1:FIELDNAME} = models.IntegerField($2)",
		"description": "IntegerField (mint).\n\nAn integer. Values from -2147483648 to 2147483647 are safe in all databases supported by Django.\n\n",
		"scope": "source.python"
	},
	"mgenericip": {
		"prefix": "mgenericip",
		"body": "${1:FIELDNAME} = models.GenericIPAddressField($2, protocol=${3:'both'}, unpack_ipv4=${4:False})",
		"description": "GenericIPAddressField (mimg).\n\nAn IPv4 or IPv6 address, in string format.\n\n",
		"scope": "source.python"
	},
	"m2m": {
		"prefix": "m2m",
		"body": "${1:FIELDNAME} = models.ManyToManyField(${2:OTHERMODEL})",
		"description": "ManyToManyField (m2m).\n\nA many-to-many relationship.\n\n",
		"scope": "source.python"
	},
	"mnullbool": {
		"prefix": "mnullbool",
		"body": "${1:FIELDNAME} = models.NullBooleanField($2)",
		"description": "NullBooleanField (mnullbool).\n\nLike a BooleanField, but allows NULL as one of the options.\n\n",
		"scope": "source.python"
	},
	"o2o": {
		"prefix": "o2o",
		"body": "${1:FIELDNAME} = models.OneToOneField(${2:OTHERMODEL}, on_delete=models.${3|CASCADE,PROTECT,SET_NULL,SET_DEFAULT,SET(),DO_NOTHING|})",
		"description": "OneToOneField (o2o).\n\nA one-to-one relationship.\n\non_delete will become a required argument in Django 2.0. In older versions it defaults to CASCADE.\n\n",
		"scope": "source.python"
	},
	"mphone": {
		"prefix": "mphone",
		"body": "${1:FIELDNAME} = models.PhoneNumberField($2)",
		"description": "PhoneNumberField (mphone).\n\n*external package: django-phonenumber-field*\n\n",
		"scope": "source.python"
	},
	"mposint": {
		"prefix": "mposint",
		"body": "${1:FIELDNAME} = models.PositiveIntegerField($2)",
		"description": "PositiveIntegerField (mposint).\n\nLike an IntegerField, but must be either positive or zero (0).\n\n",
		"scope": "source.python"
	},
	"mpossmallint": {
		"prefix": "mpossmallint",
		"body": "${1:FIELDNAME} = models.PositiveSmallIntegerField($2)",
		"description": "PositiveSmallIntegerField (mpossmallint).\n\nLike a PositiveIntegerField, but only allows values under a certain (database-dependent) point.\n\n",
		"scope": "source.python"
	},
	"mslug": {
		"prefix": "mslug",
		"body": "${1:FIELDNAME} = models.SlugField($2)",
		"description": "SlugField (mslug).\n\nA slug is a short label for something, containing only letters, numbers, underscores or hyphens. They’re generally used in URLs.\n\n",
		"scope": "source.python"
	},
	"msmallint": {
		"prefix": "msmallint",
		"body": "${1:FIELDNAME} = models.SmallIntegerField($2)",
		"description": "SmallIntegerField (msmallint).\n\nLike an IntegerField, but only allows values under a certain (database-dependent) point.\n\n",
		"scope": "source.python"
	},
	"mtext": {
		"prefix": "mtext",
		"body": "${1:FIELDNAME} = models.TextField($2)",
		"description": "TextField (mtext).\n\nA large text field.\n\n",
		"scope": "source.python"
	},
	"mtime": {
		"prefix": "mtime",
		"body": "${1:FIELDNAME} = models.TimeField($2, auto_now=${4:False}, auto_now_add=${5:False})",
		"description": "TimeField (mtime).\n\nA time, represented in Python by a datetime.time instance.\n\n",
		"scope": "source.python"
	},
	"murl": {
		"prefix": "murl",
		"body": "${1:FIELDNAME} = models.URLField($2, max_length=${3:200})",
		"description": "URLField (murl).\n\nA CharField for a URL.\n\n",
		"scope": "source.python"
	},
	"musstate": {
		"prefix": "musstate",
		"body": "${1:FIELDNAME} = models.USStateField($2)",
		"description": "USStateField (musstate).\n\n*external package: django-localflavor*\n\n",
		"scope": "source.python"
	},
	"muuid": {
		"prefix": "muuid",
		"body": "${1:FIELDNAME} = models.UUIDField($2)",
		"description": "UUIDField (muuid).\n\nA field for storing universally unique identifiers. Uses Python’s UUID class.\n\n",
		"scope": "source.python"
	},
	"mxml": {
		"prefix": "mxml",
		"body": "${1:FIELDNAME} = models.XMLField($2)",
		"description": "XMLField (mxml).\n\n*All uses of XMLField can be replaced with TextField. This field has been deprecated since version 1.3*\n\n",
		"scope": "source.python"
	},
	"mstore": {
		"prefix": "mstore",
		"body": "${1:FIELDNAME} = HStoreField()",
		"description": "HStoreField (mstore).\n\n*PostgreSQL specific model fields*.\n\nA field for storing key-value pairs. The Python data type used is a dict.\n\n",
		"scope": "source.python"
	},
	"mjson": {
		"prefix": "mjson",
		"body": "${1:FIELDNAME} = models.JSONField()",
		"description": "models.JSONField (mjson).\n\n*JSONField is supported on MariaDB 10.2.7+, MySQL 5.7.8+, Oracle, PostgreSQL, and SQLite (with the JSON1 extension enabled).\n\nA field for storing JSON encoded data.\n\n",
		"scope": "source.python"
	},
	"marray": {
		"prefix": "marray",
		"body": "${1:FIELDNAME} = ArrayField()",
		"description": "ArrayField (marray).\n\n*PostgreSQL specific model fields*.\n\nA field for storing lists of data\n\n",
		"scope": "source.python"
	}
}
